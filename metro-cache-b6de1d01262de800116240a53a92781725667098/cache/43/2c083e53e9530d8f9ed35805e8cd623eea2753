__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/neo/NodeJS/Rn/fruits/node_modules/react-navigation/src/navigators/createNavigator.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _getChildEventSubscriber = _require(_dependencyMap[2], "../getChildEventSubscriber");

  var _getChildEventSubscriber2 = _interopRequireDefault(_getChildEventSubscriber);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Navigator: {
      displayName: "Navigator",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/neo/NodeJS/Rn/fruits/node_modules/react-navigation/src/navigators/createNavigator.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  function createNavigator(NavigatorView, router, navigationConfig) {
    var _class, _temp2;

    var Navigator = _wrapComponent("Navigator")((_temp2 = _class = function (_React$Component) {
      _inherits(Navigator, _React$Component);

      function Navigator() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Navigator);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Navigator.__proto__ || Object.getPrototypeOf(Navigator)).call.apply(_ref, [this].concat(args))), _this), _this.childEventSubscribers = {}, _this._isRouteFocused = function (route) {
          var state = _this.props.navigation.state;
          var focusedRoute = state.routes[state.index];
          return route === focusedRoute;
        }, _this._dangerouslyGetParent = function () {
          return _this.props.navigation;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(Navigator, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var _this2 = this;

          var activeKeys = this.props.navigation.state.routes.map(function (r) {
            return r.key;
          });
          Object.keys(this.childEventSubscribers).forEach(function (key) {
            if (!activeKeys.includes(key)) {
              delete _this2.childEventSubscribers[key];
            }
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.childEventSubscribers = {};
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var _props = this.props,
              navigation = _props.navigation,
              screenProps = _props.screenProps;
          var dispatch = navigation.dispatch,
              state = navigation.state,
              addListener = navigation.addListener;
          var routes = state.routes;
          var descriptors = {};
          routes.forEach(function (route) {
            var getComponent = function getComponent() {
              return router.getComponentForRouteName(route.routeName);
            };

            if (!_this3.childEventSubscribers[route.key]) {
              _this3.childEventSubscribers[route.key] = (0, _getChildEventSubscriber2.default)(addListener, route.key);
            }

            var actionCreators = _extends({}, navigation.actions, router.getActionCreators(route, state.key));

            var actionHelpers = {};
            Object.keys(actionCreators).forEach(function (actionName) {
              actionHelpers[actionName] = function () {
                var actionCreator = actionCreators[actionName];
                var action = actionCreator.apply(undefined, arguments);
                dispatch(action);
              };
            });

            var childNavigation = _extends({}, actionHelpers, {
              actions: actionCreators,
              dispatch: dispatch,
              state: route,
              isFocused: function isFocused() {
                return _this3._isRouteFocused(route);
              },
              dangerouslyGetParent: _this3._dangerouslyGetParent,
              addListener: _this3.childEventSubscribers[route.key].addListener,
              getParam: function getParam(paramName, defaultValue) {
                var params = route.params;

                if (params && paramName in params) {
                  return params[paramName];
                }

                return defaultValue;
              }
            });

            var options = router.getScreenOptions(childNavigation, screenProps);
            descriptors[route.key] = {
              key: route.key,
              getComponent: getComponent,
              options: options,
              state: route,
              navigation: childNavigation
            };
          });
          return _react3.default.createElement(NavigatorView, _extends({}, this.props, {
            screenProps: screenProps,
            navigation: navigation,
            navigationConfig: navigationConfig,
            descriptors: descriptors,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 96
            }
          }));
        }
      }]);

      return Navigator;
    }(_react3.default.Component), _class.router = router, _class.navigationOptions = null, _temp2));

    return Navigator;
  }

  exports.default = createNavigator;
});